#version 430

#define FILTER_SIZE 11
#define VARIANCE 4.0

layout( local_size_x = FILTER_SIZE, local_size_y = FILTER_SIZE ) in;

layout(binding = 0, rg32f) readonly uniform image2D imageInput;
layout(binding = 1, rg32f) writeonly uniform image2D imageOutput;

shared vec2 colors[FILTER_SIZE][FILTER_SIZE];

void main() 
{
    ivec2 mainLocation = ivec2(gl_WorkGroupID.xy);
    ivec2 locationOffset = ivec2(gl_LocalInvocationID.xy) - ivec2(FILTER_SIZE) / 2;
    ivec2 location = mainLocation + locationOffset;
    
    vec2 color = imageLoad(imageInput, location).rg;
    colors[locationOffset.y + FILTER_SIZE / 2][locationOffset.x + FILTER_SIZE / 2] = color;

    barrier();

    if (locationOffset.x == 0)
    {
        vec2 newColor = vec2(0.0);
        for (int i = 0; i < FILTER_SIZE; ++i)
        {
            newColor += colors[locationOffset.y + FILTER_SIZE / 2][i] * exp(-(i - FILTER_SIZE / 2) * (i - FILTER_SIZE / 2) / 2.0 / VARIANCE);
        }
        colors[locationOffset.y + FILTER_SIZE / 2][FILTER_SIZE / 2] = newColor;
    }

    barrier();

    if (locationOffset == ivec2(0, 0))
    {
        vec2 newColor = vec2(0.0);
        for (int i = 0; i < FILTER_SIZE; ++i)
        {
            newColor += colors[i][FILTER_SIZE / 2] * exp(-(i - FILTER_SIZE / 2) * (i - FILTER_SIZE / 2) / 2.0 / VARIANCE);
        }

        newColor /= 6.28318530718 * VARIANCE;

        imageStore(imageOutput, mainLocation, vec4(newColor, 0.0, 1.0));

        // imageStore(imageOutput, mainLocation, vec4(color, 0.0, 1.0));
    }
}